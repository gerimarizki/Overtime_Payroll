@model IEnumerable<server.Models.Overtime>
@using System.Net.Http

@{
    ViewData["Title"] = "Index";
}

<link rel="stylesheet" href="~/css/site.css">
<h1>Overtime</h1>

@if (User.IsInRole("Manager"))
{
    <table id="Table" class="table-hover">
        <thead>
            <tr>
                <th>
                    @Html.DisplayNameFor(model => model.OvertimeId)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.StartOvertimeDate)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.EndOvertimeDate)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Remarks)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.PaidOvertime)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.OvertimeRemaining)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Status)
                </th>
                @* <th>
                @Html.DisplayNameFor(model => model.EmployeeGuid)
            </th>*@
                @* <th>
            @Html.DisplayNameFor(model => model.Guid)
            </th>*@
                @*  <th>
                @Html.DisplayNameFor(model => model.CreatedDate)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.ModifiedDate)
            </th>*@

                <th>Action</th>


            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                <tr>
                    @{
                        var culture = new System.Globalization.CultureInfo("id-ID");
                    }
                    <td>
                        @Html.DisplayFor(modelItem => item.OvertimeId)
                    </td>
                    <td>
                        @{
                            var formatStartOvertimeDate = item.StartOvertimeDate.ToString("dd MMMM yyyy HH:mm:ss", culture);
                        }
                        @Html.DisplayFor(modelItem => formatStartOvertimeDate)
                    </td>
                    <td>
                        @{
                            var formatEndOvertimeDate = item.EndOvertimeDate.ToString("dd MMMM yyyy HH:mm:ss", culture);
                        }
                        @Html.DisplayFor(modelItem => formatEndOvertimeDate)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Remarks)
                    </td>
                    <td>
                        @string.Format(new System.Globalization.CultureInfo("id-ID"), "{0:C}", item.PaidOvertime)
                    </td>
                    @* <td>
            @Html.DisplayFor(modelItem => item.OvertimeRemaining)
            </td>*@
                    <td>
                        @Html.DisplayFor(modelItem => item.OvertimeRemaining)
                        @* <div class="progress custom-progress-bar">
                        <div class="progress-bar custom-progress-bar-inner" role="progressbar" style="width: @item.OvertimeRemaining%;" aria-valuenow="@item.OvertimeRemaining" aria-valuemin="0" aria-valuemax="40"></div>
                    </div>*@
                    </td>

                    @*<td>
                        @Html.DisplayFor(modelItem => item.Status)
                    </td>*@

                    <td>
                        @if (item.Status == server.Utilities.Enums.StatusLevel.Accepted)
                        {
                            <span class="badge badge-success">Accepted</span>
                        }
                        else if (item.Status == server.Utilities.Enums.StatusLevel.Rejected)
                        {
                            <span class="badge badge-danger">Rejected</span>
                        }
                        else if (item.Status == server.Utilities.Enums.StatusLevel.Waiting)
                        {
                            <span class="badge badge-warning">Waiting</span>
                        }
                    </td>

                    @* <td>
                    @Html.DisplayFor(modelItem => item.EmployeeGuid)
                </td>

                <td>
                    @Html.DisplayFor(modelItem => item.CreatedDate)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.ModifiedDate)
                </td>*@
                    <td>
                        <div class="buttonAction" id="buttonGaming">
                            @if (User.IsInRole("Manager"))
                            {
                                if (item.Status == server.Utilities.Enums.StatusLevel.Accepted || item.Status == server.Utilities.Enums.StatusLevel.Rejected)
                                {
                                    <button class="btn btn-xs btn-success disabled" aria-disabled="true" id="accepted_@item.Guid">
                                        <i class="mdi mdi-checkbox-marked"></i>
                                    </button>
                                    <button class="btn btn-xs btn-danger disabled" aria-disabled="true" id="rejected_@item.Guid">
                                        <i class="mdi mdi-close-box"></i>
                                    </button>
                                }
                                else if (item.Status == server.Utilities.Enums.StatusLevel.Waiting)
                                {
                                    <button onclick="acceptedOvertime('@item.Guid')" class="btn btn-xs btn-success" id="accepted_@item.Guid">
                                        <i class="mdi mdi-checkbox-marked"></i>
                                    </button>
                                    <a onclick="rejectedOvertime('@item.Guid')" class="btn btn-xs btn-danger" id="rejected_@item.Guid">
                                        <i class="mdi mdi-close-box"></i>
                                    </a>
                                }
                            }
                        </div>
                    </td>

                </tr>
            }
        </tbody>
</table>
}




@if (User.IsInRole("Finance"))
{
    <table id="Table" class="table-hover">
        <thead>
            <tr>
                <th>
                    @Html.DisplayNameFor(model => model.OvertimeId)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.StartOvertimeDate)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.EndOvertimeDate)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Remarks)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.PaidOvertime)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.OvertimeRemaining)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Status)
                </th>
                @* <th>
            @Html.DisplayNameFor(model => model.EmployeeGuid)
            </th>*@
                @* <th>
            @Html.DisplayNameFor(model => model.Guid)
            </th>*@
                @*  <th>
            @Html.DisplayNameFor(model => model.CreatedDate)
            </th>
            <th>
            @Html.DisplayNameFor(model => model.ModifiedDate)
            </th>*@

                <th hidden>Action</th>


            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                <tr>
                    @{
                        var culture = new System.Globalization.CultureInfo("id-ID");
                    }
                    <td>
                        @Html.DisplayFor(modelItem => item.OvertimeId)
                    </td>
                    <td>
                        @{
                            var formatStartOvertimeDate = item.StartOvertimeDate.ToString("dd MMMM yyyy HH:mm:ss", culture);
                        }
                        @Html.DisplayFor(modelItem => formatStartOvertimeDate)
                    </td>
                    <td>
                        @{
                            var formatEndOvertimeDate = item.EndOvertimeDate.ToString("dd MMMM yyyy HH:mm:ss", culture);
                        }
                        @Html.DisplayFor(modelItem => formatEndOvertimeDate)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Remarks)
                    </td>
                    <td>
                        @string.Format(new System.Globalization.CultureInfo("id-ID"), "{0:C}", item.PaidOvertime)
                    </td>
                    @* <td>
            @Html.DisplayFor(modelItem => item.OvertimeRemaining)
            </td>*@
                    <td>
                        @Html.DisplayFor(modelItem => item.OvertimeRemaining)
                        @* <div class="progress custom-progress-bar">
                <div class="progress-bar custom-progress-bar-inner" role="progressbar" style="width: @item.OvertimeRemaining%;" aria-valuenow="@item.OvertimeRemaining" aria-valuemin="0" aria-valuemax="40"></div>
                </div>*@
                    </td>


                    <td>
                        @if (item.Status == server.Utilities.Enums.StatusLevel.Accepted)
                        {
                            <span class="badge badge-success">Accepted</span>
                        }
                        else if (item.Status == server.Utilities.Enums.StatusLevel.Rejected)
                        {
                            <span class="badge badge-danger">Rejected</span>
                        }
                        else if (item.Status == server.Utilities.Enums.StatusLevel.Waiting)
                        {
                            <span class="badge badge-warning">Waiting</span>
                        }
                    </td>


                    @* <td>
            @Html.DisplayFor(modelItem => item.EmployeeGuid)
            </td>

            <td>
            @Html.DisplayFor(modelItem => item.CreatedDate)
            </td>
            <td>
            @Html.DisplayFor(modelItem => item.ModifiedDate)
            </td>*@
                    <td>
                        <div class="buttonAction" id="buttonGaming">
                            @if (User.IsInRole("Manager"))
                            {
                                @if (item.Status == server.Utilities.Enums.StatusLevel.Accepted || item.Status == server.Utilities.Enums.StatusLevel.Rejected)
                                {
                                    <button class="btn btn-xs btn-success disabled" aria-disabled="true" id="accepted_@item.Guid">
                                        <i class="mdi mdi-checkbox-marked"></i>
                                    </button>
                                    <button class="btn btn-xs btn-danger disabled" aria-disabled="true" id="rejected_@item.Guid">
                                        <i class="mdi mdi-close-box"></i>
                                    </button>
                                }
                                else if (item.Status == server.Utilities.Enums.StatusLevel.Waiting)
                                {
                                    <button onclick="processOvertime('@item.Guid', 'accepted')" class="btn btn-xs btn-success" aria-disabled="true" id="accepted_@item.Guid">
                                        <i class="mdi mdi-checkbox-marked"></i>
                                    </button>
                                    <a onclick="processOvertime('@item.Guid', 'rejected')" class="btn btn-xs btn-danger" id="rejected_@item.Guid">
                                        <i class="mdi mdi-close-box"></i>
                                    </a>
                                }
                            }
                        </div>
                    </td>

                </tr>
            }
        </tbody>
    </table>
}

@*-----------------------------------
modal update status overtime
-----------------------------------*@
<div class="modal" id="modalUpdate" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Update</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <input type="text" class="form-control" id="guidUpdate">
                <div class="mb-3">
                    <label for="status" class="col-form-label">Status:</label>
                    <select class="form-control" id="statusUpdate" required>
                        <option value="2">Waiting</option>
                        <option value="1">Rejected</option>
                        <option value="0">Accepted</option>
                    </select>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" onclick="UpdateStatus()" class="btn btn-primary d-inline-block" data-bs-dismiss="modal">Update Status</button>
                <button type="button" class="btn btn-secondary d-inline-block" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>




@section Scripts {
    <script>const Token = '@Context.Session.GetString("JWToken")'</script>
   <script>
     
    var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'))
    var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
        return new bootstrap.Tooltip(tooltipTriggerEl)
    })

    var status = {};

    $(function () {
        $('#Table').DataTable({
            "dom":
                "<'row'<'col-md-8'B><'col-md-4'f>>" +
                "<'row'<'col-sm-12'tr>>" + // Tabel
                "<'row'<'col-md-5'i><'col-md-3 mt-2 mx-auto'l><'col-md-4'p>>",
            "buttons": [
                {
                    extend: 'copy',
                    text: 'Salin',
                    className: 'btn btn-primary'
                },
                {
                    extend: 'csv',
                    text: 'CSV',
                    className: 'btn btn-secondary'
                },
                {
                    extend: 'excel',
                    text: 'Excel',
                    className: 'btn btn-success'
                },
                {
                    extend: 'pdf',
                    text: 'PDF',
                    className: 'btn btn-info'
                },
                {
                    extend: 'print',
                    text: 'Cetak',
                    className: 'btn btn-warning'
                },
                {
                    extend: 'colvis',
                    text: 'Sembunyikan Kolom',
                    className: 'btn btn-dark'
                }
            ],
            "lengthMenu": [[10, 25, 50, -1], [10, 25, 50, "All"]],
            "pageLength": 25
        });
            var dataTableButtons = $('.dt-button');
            dataTableButtons.removeClass('dt-button');
    });

    function UpdateStatus() {
        let data = {
            guid: $("#guidUpdate").val(),
            status: parseInt($("#statusUpdate").val()),
        };
        $.ajax({
            url: "https://localhost:7128/api/overtimes/update-employee-status",
                headers: {
                    'Authorization': 'Bearer ' + Token
                },
            type: "PUT",
            contentType: "application/json",
            data: JSON.stringify(data)
        }).done((result) => {
            Swal.fire({
                title: 'Success',
                text: 'Data has been successfully updated',
                icon: 'success'
            }).then(function () {
                location.reload();
            });
        }).fail((error) => {
            Swal.fire({
                icon: 'error',
                title: 'Oops...',
                text: 'Failed to insert data! Please try again.'
            })
            console.log(error)
        })
    }

    function acceptedOvertime(guidEmployee) {
        // Periksa apakah tombol sudah ditekan sebelumnya
      

        let data = {
            guid: guidEmployee,
            status: 0
        };

        $.ajax({
            url: "https://localhost:7128/api/overtimes/update-employee-status",
                headers: {
                    'Authorization': 'Bearer ' + Token
                },
            type: "PUT",
            contentType: "application/json",
            data: JSON.stringify(data)
        }).done((result) => {
            console.log(result);
            Swal.fire({
                title: 'Success',
                text: 'Data has been successfully updated',
                icon: 'success'
            }).then(function () {
               location.reload()
               
            });
        }).fail((error) => {
            Swal.fire({
                icon: 'error',
                title: 'Oops...',
                text: 'Failed to update data! Please try again.'
            });
            console.log(error);
        });
    }

    function rejectedOvertime(guidEmployee) {
       

        let data = {
            guid: guidEmployee,
            status: 1
        };

        $.ajax({
            url: "https://localhost:7128/api/overtimes/update-employee-status",
                headers: {
                    'Authorization': 'Bearer ' + Token
                },
            type: "PUT",
            contentType: "application/json",
            data: JSON.stringify(data)
        }).done((result) => {
            Swal.fire({
                title: 'Success',
                text: 'Data has been successfully updated',
                icon: 'success'
            }).then(function () {
               location.reload()
               
            });
        }).fail((error) => {
            Swal.fire({
                icon: 'error',
                title: 'Oops...',
                text: 'Failed to update data! Please try again.'
            });
            console.log(error);
        });
    }
</script>

}



   

